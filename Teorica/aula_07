Data: 30/03/2017

1. Quantos pipes serão criados após as linhas de código a seguir? Por quê?
	(a) int pid;
		int fd[2];
		pipe(fd);
		pid = fork();
	R: Será criado apenas 1 pipe devido ao fato de que o fork é feito depois da criação do pipe, assim o pipe só "liga" dois processos.	

	(b) int pid;
		int fd[2];
		pid = fork();
		pipe(fd);
	R: Serão criados dois pipes pois o fork é feito antes da criação do pipe sendo assim os pipes ligarão 4 processos.

2. Apresente mais cinco sinais importantes do ambiente Unix, além do SIGSEGV, SIGUSR1, SIGUSR2, SIGALRM e SIGINT. Quais são suas características e utilidades?
	R: 
	   SIGQUIT: sinal emitido aos processos do terminal quando com a tecla de abandono QUIT ou CTRL+d do teclado são acionadas.
	   SIGTRAP: emitido após cada instrução em caso de geração de traces do processo.
	   SIGILL: emitido quando uma instrução ilegal é emitida.
	   SIGEMT: emitido em caso de erro material depende da implementação.
	   SIGBUS: emitido em caso de erro sobre barramento.

3. Considere o código a seguir:

	 1. #include <signal.h>
	 2. #include <unistd.h>
	 3. #include <stdio.h>
	 4. #include <stdlib.h>
	 5.
	 6. void tratamento_alarme(int sig)
	 7. {
	 8. 	system("date");
	 9. 	alarm(1);
	10. }
	11. 
	12. int main()
	13. {
	14. 	signal(SIGALRM, tratamento_alarme);
	15. 	alarm(1);
	16. 	printf("Aperte CTRL+C para acabar:\n");
	17. 	while(1);
	18. 	return 0;
	19. }

Sabendo que a função alarm() tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os alarmes criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo real?
	R: A precisão inical da função é de 1 em 1 segundo. A imprecisão vem do tempo de chamada da função que no começo pode ser pequena mas depois de algum tempo, não arbitrário, começa a atrasar podendo causar grandes problemas dependendo da aplicação. Não é confiável pois de acordo com pesquisas após um certo tempo o relógio acaba se tornando impreciso.
